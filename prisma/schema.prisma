// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categoris Category[] @relation("StoreToCategory")
  favorites Favorite[] @relation("StoreToFavorite")
  hypoallergenics Hypoallergenic[] @relation("StoreToHypoallergenic")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  CreatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields:[storeId], references: [id])
  label String
  imageUrl String
  categories Category[] @relation("BillboardToCategory")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])

}


model Favorite{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToFavorite", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}



model Hypoallergenic{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToHypoallergenic", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Product {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isOutOfStock Boolean @default(false)
  favoriteId String
  favorite Favorite @relation(fields: [favoriteId], references: [id])
  hypoallergenicId String
  hypoallergenic Hypoallergenic @relation(fields: [hypoallergenicId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
  @@index([categoryId])
  @@index([favoriteId])
  @@index([hypoallergenicId])

}



model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String?
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])


  @@index([orderId])
  @@index([productId])
}
